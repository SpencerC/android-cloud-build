#!/bin/bash

BUCKET=""
SRC_DIR="/tmp"
KEY="cache"
PATHS=()

function print_usage {
  echo "Usage: $0 --bucket=gs://my-cache-bucket --key=cache-key"
  echo
  echo "Saves the specified paths to a cache file located in the out directory."
  echo
  echo "  -b, --bucket   The cloud storage bucket to upload the cache to. [optional]"
  echo "  -o, --out      The output directory to save the cache to. [default: /tmp]"
  echo "  -k, --key      The cache key used for this cache file. [default: cache]"
  echo 
}

for i in "$@"; do
  case $i in
    -b=*|--bucket=*)
      BUCKET="${i#*=}"
      shift
      ;;
    -s=*|--src=* )
      OUT_DIR="${i#*=}"
      shift
      ;;
    -k=*|--key=* )
      KEY="${i#*=}"
      shift
      ;;
    -h|--help )
      print_usage
      exit 0
      ;;
    *)
      echo "Unknown option: ${i}"
      print_usage
      exit 1
      ;;
  esac
done

if [ -z "${BUCKET}" ] && [ -z "${SRC_DIR}" ];then
  echo "Require one of [--bucket, --src]"
  print_usage
  exit 1
fi

eval "KEY=\"$KEY\""

if [ -n "${BUCKET}" ];then
  remote_cache_file="${BUCKET}/${KEY}.tgz"
  echo "Downloading cache file: ${remote_cache_file}..."
  gsutil -q cp "${remote_cache_file}" "${SRC_DIR}"

  if [ $? -ne 0 ];then
    echo "No remote cache file exists for key ${KEY}"
    exit 0
  fi
fi

CACHE_FILE="${SRC_DIR}/${KEY}.tgz"

if [ -f "${CACHE_FILE}" ];then
  echo "Restoring cache from file ${CACHE_FILE}..."
  tar xpzf "$CACHE_FILE" -C /
else
  echo "No cache file for key ${KEY}."
fi
